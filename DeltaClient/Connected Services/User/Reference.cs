//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeltaClient.User {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
    [System.SerializableAttribute()]
    public partial class ManagerFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaDBManager.UserNS")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LicenseExpirationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LicensePointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isAdminField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string License {
            get {
                return this.LicenseField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseField, value) != true)) {
                    this.LicenseField = value;
                    this.RaisePropertyChanged("License");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LicenseExpiration {
            get {
                return this.LicenseExpirationField;
            }
            set {
                if ((this.LicenseExpirationField.Equals(value) != true)) {
                    this.LicenseExpirationField = value;
                    this.RaisePropertyChanged("LicenseExpiration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LicensePoints {
            get {
                return this.LicensePointsField;
            }
            set {
                if ((this.LicensePointsField.Equals(value) != true)) {
                    this.LicensePointsField = value;
                    this.RaisePropertyChanged("LicensePoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isAdmin {
            get {
                return this.isAdminField;
            }
            set {
                if ((this.isAdminField.Equals(value) != true)) {
                    this.isAdminField = value;
                    this.RaisePropertyChanged("isAdmin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Delta.DeltaManager.UserNS", ConfigurationName="User.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/CreateUser", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/CreateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.User.ManagerFault), Action="Delta.DeltaManager.UserNS/IUserManager/CreateUserManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        bool CreateUser(string Name, string Email, string PassHash, bool isAdmin, System.Nullable<System.DateTime> LicenseExpiration, int LicensePoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/CreateUser", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/CreateUserResponse")]
        System.Threading.Tasks.Task<bool> CreateUserAsync(string Name, string Email, string PassHash, bool isAdmin, System.Nullable<System.DateTime> LicenseExpiration, int LicensePoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/DeleteUser", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/DeleteUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.User.ManagerFault), Action="Delta.DeltaManager.UserNS/IUserManager/DeleteUserManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        bool DeleteUser(DeltaClient.User.User DeletableUser, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/DeleteUser", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(DeltaClient.User.User DeletableUser, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/GetUsers", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/GetUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.User.ManagerFault), Action="Delta.DeltaManager.UserNS/IUserManager/GetUsersManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        DeltaClient.User.User[] GetUsers(string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/GetUsers", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/GetUsersResponse")]
        System.Threading.Tasks.Task<DeltaClient.User.User[]> GetUsersAsync(string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/IsAdmin", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/IsAdminResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.User.ManagerFault), Action="Delta.DeltaManager.UserNS/IUserManager/IsAdminManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        bool IsAdmin(string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/IsAdmin", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/IsAdminResponse")]
        System.Threading.Tasks.Task<bool> IsAdminAsync(string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/LoginChecker", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/LoginCheckerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.User.ManagerFault), Action="Delta.DeltaManager.UserNS/IUserManager/LoginCheckerManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        bool LoginChecker(string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/LoginChecker", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/LoginCheckerResponse")]
        System.Threading.Tasks.Task<bool> LoginCheckerAsync(string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/UpdateUser", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/UpdateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.User.ManagerFault), Action="Delta.DeltaManager.UserNS/IUserManager/UpdateUserManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        bool UpdateUser(DeltaClient.User.User UpdatableUser, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/UpdateUser", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(DeltaClient.User.User UpdatableUser, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/GetUserByEmail", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/GetUserByEmailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.User.ManagerFault), Action="Delta.DeltaManager.UserNS/IUserManager/GetUserByEmailManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        DeltaClient.User.User GetUserByEmail(string SearchedEmail, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/GetUserByEmail", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<DeltaClient.User.User> GetUserByEmailAsync(string SearchedEmail, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/AddUser", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/AddUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.User.ManagerFault), Action="Delta.DeltaManager.UserNS/IUserManager/AddUserManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        bool AddUser(DeltaClient.User.User user, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.UserNS/IUserManager/AddUser", ReplyAction="Delta.DeltaManager.UserNS/IUserManager/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(DeltaClient.User.User user, string Email, string MD5PassHash);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : DeltaClient.User.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<DeltaClient.User.IUserManager>, DeltaClient.User.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateUser(string Name, string Email, string PassHash, bool isAdmin, System.Nullable<System.DateTime> LicenseExpiration, int LicensePoints) {
            return base.Channel.CreateUser(Name, Email, PassHash, isAdmin, LicenseExpiration, LicensePoints);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserAsync(string Name, string Email, string PassHash, bool isAdmin, System.Nullable<System.DateTime> LicenseExpiration, int LicensePoints) {
            return base.Channel.CreateUserAsync(Name, Email, PassHash, isAdmin, LicenseExpiration, LicensePoints);
        }
        
        public bool DeleteUser(DeltaClient.User.User DeletableUser, string Email, string MD5PassHash) {
            return base.Channel.DeleteUser(DeletableUser, Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(DeltaClient.User.User DeletableUser, string Email, string MD5PassHash) {
            return base.Channel.DeleteUserAsync(DeletableUser, Email, MD5PassHash);
        }
        
        public DeltaClient.User.User[] GetUsers(string Email, string MD5PassHash) {
            return base.Channel.GetUsers(Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<DeltaClient.User.User[]> GetUsersAsync(string Email, string MD5PassHash) {
            return base.Channel.GetUsersAsync(Email, MD5PassHash);
        }
        
        public bool IsAdmin(string Email, string MD5PassHash) {
            return base.Channel.IsAdmin(Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<bool> IsAdminAsync(string Email, string MD5PassHash) {
            return base.Channel.IsAdminAsync(Email, MD5PassHash);
        }
        
        public bool LoginChecker(string Email, string MD5PassHash) {
            return base.Channel.LoginChecker(Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<bool> LoginCheckerAsync(string Email, string MD5PassHash) {
            return base.Channel.LoginCheckerAsync(Email, MD5PassHash);
        }
        
        public bool UpdateUser(DeltaClient.User.User UpdatableUser, string Email, string MD5PassHash) {
            return base.Channel.UpdateUser(UpdatableUser, Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(DeltaClient.User.User UpdatableUser, string Email, string MD5PassHash) {
            return base.Channel.UpdateUserAsync(UpdatableUser, Email, MD5PassHash);
        }
        
        public DeltaClient.User.User GetUserByEmail(string SearchedEmail, string Email, string MD5PassHash) {
            return base.Channel.GetUserByEmail(SearchedEmail, Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<DeltaClient.User.User> GetUserByEmailAsync(string SearchedEmail, string Email, string MD5PassHash) {
            return base.Channel.GetUserByEmailAsync(SearchedEmail, Email, MD5PassHash);
        }
        
        public bool AddUser(DeltaClient.User.User user, string Email, string MD5PassHash) {
            return base.Channel.AddUser(user, Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(DeltaClient.User.User user, string Email, string MD5PassHash) {
            return base.Channel.AddUserAsync(user, Email, MD5PassHash);
        }
    }
}
