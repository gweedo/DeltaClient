//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeltaClient.Car {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Car", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaDBManager.CarNS")]
    [System.SerializableAttribute()]
    public partial class Car : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BurnedLitersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KilometersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MakeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BurnedLiters {
            get {
                return this.BurnedLitersField;
            }
            set {
                if ((this.BurnedLitersField.Equals(value) != true)) {
                    this.BurnedLitersField = value;
                    this.RaisePropertyChanged("BurnedLiters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Kilometers {
            get {
                return this.KilometersField;
            }
            set {
                if ((this.KilometersField.Equals(value) != true)) {
                    this.KilometersField = value;
                    this.RaisePropertyChanged("Kilometers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Make {
            get {
                return this.MakeField;
            }
            set {
                if ((object.ReferenceEquals(this.MakeField, value) != true)) {
                    this.MakeField = value;
                    this.RaisePropertyChanged("Make");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateNumber {
            get {
                return this.PlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateNumberField, value) != true)) {
                    this.PlateNumberField = value;
                    this.RaisePropertyChanged("PlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
    [System.SerializableAttribute()]
    public partial class ManagerFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Delta.DeltaManager.CarNS", ConfigurationName="Car.ICarManager")]
    public interface ICarManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/AddCar", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/AddCarResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.Car.ManagerFault), Action="Delta.DeltaManager.CarNS/ICarManager/AddCarManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        bool AddCar(DeltaClient.Car.Car car, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/AddCar", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/AddCarResponse")]
        System.Threading.Tasks.Task<bool> AddCarAsync(DeltaClient.Car.Car car, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/DeleteCar", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/DeleteCarResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.Car.ManagerFault), Action="Delta.DeltaManager.CarNS/ICarManager/DeleteCarManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        bool DeleteCar(DeltaClient.Car.Car car, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/DeleteCar", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/DeleteCarResponse")]
        System.Threading.Tasks.Task<bool> DeleteCarAsync(DeltaClient.Car.Car car, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/GetAvailableCars", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/GetAvailableCarsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.Car.ManagerFault), Action="Delta.DeltaManager.CarNS/ICarManager/GetAvailableCarsManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        DeltaClient.Car.Car[] GetAvailableCars(System.DateTime Start, System.DateTime End, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/GetAvailableCars", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/GetAvailableCarsResponse")]
        System.Threading.Tasks.Task<DeltaClient.Car.Car[]> GetAvailableCarsAsync(System.DateTime Start, System.DateTime End, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/GetCars", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/GetCarsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.Car.ManagerFault), Action="Delta.DeltaManager.CarNS/ICarManager/GetCarsManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        DeltaClient.Car.Car[] GetCars(string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/GetCars", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/GetCarsResponse")]
        System.Threading.Tasks.Task<DeltaClient.Car.Car[]> GetCarsAsync(string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/UpdateCar", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/UpdateCarResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DeltaClient.Car.ManagerFault), Action="Delta.DeltaManager.CarNS/ICarManager/UpdateCarManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Delta.DeltaManager.Utils")]
        bool UpdateCar(DeltaClient.Car.Car UpdatableCar, string Email, string MD5PassHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="Delta.DeltaManager.CarNS/ICarManager/UpdateCar", ReplyAction="Delta.DeltaManager.CarNS/ICarManager/UpdateCarResponse")]
        System.Threading.Tasks.Task<bool> UpdateCarAsync(DeltaClient.Car.Car UpdatableCar, string Email, string MD5PassHash);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICarManagerChannel : DeltaClient.Car.ICarManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CarManagerClient : System.ServiceModel.ClientBase<DeltaClient.Car.ICarManager>, DeltaClient.Car.ICarManager {
        
        public CarManagerClient() {
        }
        
        public CarManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CarManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddCar(DeltaClient.Car.Car car, string Email, string MD5PassHash) {
            return base.Channel.AddCar(car, Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<bool> AddCarAsync(DeltaClient.Car.Car car, string Email, string MD5PassHash) {
            return base.Channel.AddCarAsync(car, Email, MD5PassHash);
        }
        
        public bool DeleteCar(DeltaClient.Car.Car car, string Email, string MD5PassHash) {
            return base.Channel.DeleteCar(car, Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCarAsync(DeltaClient.Car.Car car, string Email, string MD5PassHash) {
            return base.Channel.DeleteCarAsync(car, Email, MD5PassHash);
        }
        
        public DeltaClient.Car.Car[] GetAvailableCars(System.DateTime Start, System.DateTime End, string Email, string MD5PassHash) {
            return base.Channel.GetAvailableCars(Start, End, Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<DeltaClient.Car.Car[]> GetAvailableCarsAsync(System.DateTime Start, System.DateTime End, string Email, string MD5PassHash) {
            return base.Channel.GetAvailableCarsAsync(Start, End, Email, MD5PassHash);
        }
        
        public DeltaClient.Car.Car[] GetCars(string Email, string MD5PassHash) {
            return base.Channel.GetCars(Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<DeltaClient.Car.Car[]> GetCarsAsync(string Email, string MD5PassHash) {
            return base.Channel.GetCarsAsync(Email, MD5PassHash);
        }
        
        public bool UpdateCar(DeltaClient.Car.Car UpdatableCar, string Email, string MD5PassHash) {
            return base.Channel.UpdateCar(UpdatableCar, Email, MD5PassHash);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCarAsync(DeltaClient.Car.Car UpdatableCar, string Email, string MD5PassHash) {
            return base.Channel.UpdateCarAsync(UpdatableCar, Email, MD5PassHash);
        }
    }
}
